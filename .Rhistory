#print(chrom[c2,])
#print(fitneScore[c2])
if(fitneScore[c2]<fitneScore[c1])
select=c2
else
select=c1
temp[i,]<-chrom[select,]
#print(select)
}
chrom<<-temp
#chrom
}
ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=1)
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA UDF.R')
source('E:/Projects/Research/GA UDF.R')
source('E:/Projects/Research/GA UDF.R')
source('E:/Projects/Research/GA UDF.R')
source('E:/Projects/Research/GA UDF.R')
source('E:/Projects/Research/GA modular.R')
fitness(1)
blast_df<-read.csv("E:/Projects/Research/Blasting_data.csv")
names(blast_df)[11]<-"Explosive_kg"
blast_df[is.na(blast_df)]<-0
split=sample.split(blast_df,SplitRatio = 0.75)
train_data<-subset(blast_df,split==TRUE)
test_data<-subset(blast_df,split==FALSE)
mp<<-mut
v<-floor(runif((pop*length(feature)), min=0, max=2))
ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=1)
ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=1)
ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=1)
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
mp1<-runif(1, 0, 1)
mp1
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
#print(elite_score[1:numb])
#print(var_names[u==1])
plot(elite_score[1:iter],type="o")
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
ga_proc(feature = c(1:4,6:15),target = 17,train_data,test_data,iter=200)
source('E:/Projects/Research/GA modular.R')
test_data[target]
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
blast_df[target]
elite_score
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
elite[50]
elite[50,]
elite_score[iter]
elite_score[50]
u<-elite[which.min(elite_score[1:iter]),]
u<-elite[which.min(elite_score[1:50]),]
u
elite[50,]
score<-elite_score[which.min(elite_score[1:iter])]
score<-elite_score[which.min(elite_score[1:50])]
score
source('E:/Projects/Research/GA modular.R')
ga_soln<-elite[which.min(elite_score[1:iter]),]
ga_soln<-elite[which.min(elite_score[1:50]),]
finalfeatures<-var_names[ga_soln==1]
finalfeatures<-feature[ga_soln==1]
finalfeatures
formulae_final<-formula(paste(target, '~', paste(finalfeatures, collapse = '+')))
formulae_final
result<-list("solution"=ga_soln,"features"=finalfeatures,"final_elite_score"=score,"formulae"=formulae_final,"fitness_curve"=p)
#print(elite_score[1:numb])
#print(var_names[u==1])
p<-plot(elite_score[1:iter],type="o")
#print(elite_score[1:numb])
#print(var_names[u==1])
p<-plot(elite_score[1:50],type="o")
result<-list("solution"=ga_soln,"features"=finalfeatures,"final_elite_score"=score,"formulae"=formulae_final,"fitness_curve"=p)
source('E:/Projects/Research/GA modular.R')
ga_run
feature[ga_soln==1]
library(caret)
library(dplyr)
library(caTools)
blast_df<-read.csv("E:/Projects/Research/Blasting_data.csv")
names(blast_df)[11]<-"Explosive_kg"
blast_df[is.na(blast_df)]<-0
split=sample.split(blast_df,SplitRatio = 0.75)
train_data<-subset(blast_df,split==TRUE)
test_data<-subset(blast_df,split==FALSE)
ga_proc<-function(feature,target,train_data1,test_data1,iter,cros=0.7,mut=0.05,pop=20){
set.seed(123)
v<-floor(runif((pop*length(feature)), min=0, max=2))
chrom<<-matrix(v,ncol=length(feature))
fitneScore<<-replicate(nrow(chrom),0)
elite_score<<-replicate(iter,0)
elite<<-matrix(replicate((iter*length(feature)),0),ncol=length(feature))
var_names<-names(train_data1)
feature<<-var_names[feature]
#print(var_names)
target<<-var_names[target]
#print(target)
temp<<-matrix(replicate((pop*length(feature)),0),ncol=length(feature))
for(i in 1:iter){
#set.seed(123)
fitness(i,train_data1,test_data1)
#set.seed(se)
selection(nrow(chrom))
#set.seed(se)
crossover(nrow(chrom),ncol(chrom),cros)
mutation(mut)
}
ga_soln<-elite[which.min(elite_score[1:iter]),]
finalfeatures<-feature[ga_soln==1]
score<-elite_score[which.min(elite_score[1:iter])]
formulae_final<-formula(paste(target, '~', paste(finalfeatures, collapse = '+')))
#print(elite_score[1:numb])
#print(var_names[u==1])
p<-plot(elite_score[1:iter],type="o")
result<-list("solution"=ga_soln,"features"=finalfeatures,"final_elite_score"=score,"formulae"=formulae_final,"fitness_curve"=p)
return(result)
}
#Fitness function
fitness<-function(iter,train_data1,test_data1){
for(r in 1:nrow(chrom))
{
vec<-chrom[r,]
#print(r)
#print(vec)
regressor<-feature[which(vec==1)]
form <- paste(regressor, collapse = '+')
form_in <- formula(paste(target, '~', form))
mod_throw<-lm(form_in, data = train_data1)
#print(form_in)
pred<-predict(mod_throw,test_data1)
rmse<-RMSE(pred,test_data1[,target])
#print(rmse)
fitneScore[r]<<-rmse
}
elite_score[iter]<<-min(fitneScore)
elite[iter,]<<-chrom[which.min(fitneScore),]
#print(which.max(fitneScore))
#print(elite[iter,])
#print(elite_score[iter])
#feature[elite[iter,]==1]
}
selection<-function(r)
{
for(i in 1:r){
c1<-floor(runif(1,min=1, max=r+1))
c2<-floor(runif(1,min=1, max=r+1))
while(c1==c2)
{
c2<-floor(runif(1,min=1, max=r+1))
}
#print(c1)
#print(chrom[c1,])
#print(fitneScore[c1])
#print(c2)
#print(chrom[c2,])
#print(fitneScore[c2])
if(fitneScore[c2]<fitneScore[c1])
select=c2
else
select=c1
temp[i,]<-chrom[select,]
#print(select)
}
chrom<<-temp
#chrom
}
crossover<-function(r,c,cp){
for(i in 1:(r/2)){
cp1<-runif(1, 0, 1)
#print(cp)
if(cp1<cp){
p1<-floor(runif(1,min=1, max=r+1))
p2<-floor(runif(1,min=1, max=r+1))
while(p1==p2)
{
p2<-floor(runif(1,min=1, max=r+1))
}
#print(p1)
#print(chrom[p1,])
#print(p2)
#print(chrom[p2,])
pos1<-floor(runif(1,min=1, max=c+1))
pos2<-floor(runif(1,min=1, max=c+1))
while(pos1==pos2)
{
pos2<-floor(runif(1,min=1, max=c+1))
}
if(pos1>pos2){
stemp=pos1
pos1=pos2
pos2=stemp
}
#print(pos1)
#print(pos2)
swap<-replicate(c,0)
swap[pos1:pos2]<-chrom[p1,pos1:pos2]
chrom[p1,pos1:pos2]<<-chrom[p2,pos1:pos2]
chrom[p2,pos1:pos2]<<-swap[pos1:pos2]
#print(p1)
#print(chrom[p1,])
#print(p2)
#print(chrom[p2,])
}
}
}
mutation<-function(mp)
{
for(j in 1:nrow(chrom)){
mp1<-runif(1, 0, 1)
#print(mp1)
if(mp1<mp){
pos<-floor(runif(1,min=1, max=ncol(chrom)+1))
#print(pos)
#print(chrom[j,])
if(chrom[j,pos]==1)
chrom[j,pos]<<-0
else
chrom[j,pos]<<-1
#print(chrom[j,])
}
}
}
ga_run<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50)
ga_run$solution
ga_run$features
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
ga_run<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50)
iter=50
ga_soln<-elite[which.min(elite_score[1:iter]),]
finalfeatures<-feature[ga_soln==1]
finalfeatures
source('E:/Projects/Research/GA modular.R')
finalfeatures<-feature[ga_soln==1]
source('E:/Projects/Research/GA modular.R')
ga_soln<-elite[which.min(elite_score[1:iter]),]
finalfeatures<-feature[ga_soln==1]
score<-elite_score[which.min(elite_score[1:iter])]
formulae_final<-paste(target, '~', paste(finalfeatures, collapse = '+'))
#print(elite_score[1:numb])
#print(var_names[u==1])
p<-plot(elite_score[1:iter],type="o")
result<-list(solution=ga_soln,features=finalfeatures,final_elite_score=score,formulae=formulae_final,fitness_curve=p)
print(result)
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
ga_result
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
View(ga_result)
View(chrom)
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
View(ga_result)
source('E:/Projects/Research/GA modular.R')
ga_result
source('E:/Projects/Research/GA modular.R')
ga_result
var_names[ga_result==1]
var_names[ga_result$solution]
var_names[ga_result$features]
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50,cros=0.7,mut=0.01,pop = 20)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50,cros=0.8,mut=0.01,pop = 25)
var_names[ga_result$features]
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50,cros=0.75,mut=0.01,pop = 25)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50,cros=0.7,mut=0.01,pop = 20)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50,cros=0.7,mut=0.01,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50,cros=0.75,mut=0.05,pop = 30)
var_names[ga_result$features]
cor(blast_df[1:15],blast_df[16])
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50,cros=0.7,mut=0.05,pop = 30)
var_names[ga_result$features]
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=50,cros=0.7,mut=0.01,pop = 30)
var_names[ga_result$features]
ga_result<-ga_proc(feature = c(1:4,6:15),target = 17,train_data,test_data,iter=50,cros=0.7,mut=0.01,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 17,train_data,test_data,iter=50,cros=0.75,mut=0.01,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 17,train_data,test_data,iter=50,cros=0.75,mut=0.05,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 17,train_data,test_data,iter=50,cros=0.8,mut=0.01,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 17,train_data,test_data,iter=50,cros=0.8,mut=0.05,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 17,train_data,test_data,iter=50,cros=0.8,mut=0.05,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 18,train_data,test_data,iter=50,cros=0.7,mut=0.01,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 18,train_data,test_data,iter=50,cros=0.7,mut=0.05,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 18,train_data,test_data,iter=50,cros=0.8,mut=0.05,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 18,train_data,test_data,iter=50,cros=0.8,mut=0.01,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 18,train_data,test_data,iter=50,cros=0.75,mut=0.01,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 18,train_data,test_data,iter=50,cros=0.75,mut=0.05,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 18,train_data,test_data,iter=90,cros=0.75,mut=0.05,pop = 30)
ga_result<-ga_proc(feature = c(1:4,6:15),target = 16,train_data,test_data,iter=90,cros=0.75,mut=0.05,pop = 30)
?plot
source('E:/Projects/Research/GA modular.R')
warning()
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/GA modular.R')
source('E:/Projects/Research/blast1.r')
source('E:/Projects/Research/blast1.r')
source('E:/Projects/Research/blast1.r')
mod_throw$coefficients
class(mod_throw$coefficients)
type(mod_throw$coefficients)
v<-mod_throw$coefficients
v
names(v)
v[-1]
v<-mod_throw$coefficients
n<-names(v[-1])
form <- paste(v, collapse = '+')
form_in <- formula(paste(names(train)[16], '~', form))
mod_throw<-lm(form_in, data = train)
form_in
form <- paste(n, collapse = '+')
form_in <- formula(paste(names(train)[16], '~', form))
form_in
mod_throw<-lm(form_in, data = train)
set.seed(42)
cv_5 = trainControl(method = "cv", number = 5)
throw_elnet = train(form_in, data = Hitters, method = "glmnet", trControl = cv_5)
throw_elnet = train(form_in, data = train, method = "glmnet", trControl = cv_5)
throw_elnet
install.packages("shiny")
install.packages("shinythemes")
app.R
app
shiny::runApp('E:/Projects')
install.packages("shiny")
install.packages("cldr", type="binary")
install.packages("shiny")
install.packages("cld2")
install.packages("shiny")
install.packages("cld3")
install.packages("shiny")
install.packages("htmltools")
sessionInfo()
library(shiny)
install.packages("htmltools")
install.packages('htmltools')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
q()
shiny::runApp('E:/Projects')
install.packages('renv')
library(shiny); source('E:/Projects/Covid-19-Forecast-Model/WebApp/run.R')
source('E:/Projects/Covid-19-Forecast-Model/WebApp/run.R')
setwd("E://Projects//Covid-19-Forecast-Model//WebApp")
source('run.R')
source('run.R')
shiny::runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(shiny); runApp('run.R')
runApp('run.R')
source("run.R")
help(rstan)
help("rstan")
help('rstan')
df<-read.csv("https://api.covid19india.org/csv/latest/case_time_series.csv")
df$Date<-as.Date(df$Date,format="%d %b")
nrec<-length(df$Date)
latest_date<-df$Date[nrec]
latest_date
df<-read.csv("https://api.covid19india.org/csv/latest/case_time_series.csv")
df$Date<-as.Date(df$Date,format="%d %b")
nrec<-length(df$Date)
latest_date<-df$Date[nrec]
latest_date
df
tail(df)
install.packages("maps")
UK <- map_data("world") %>% filter(region=="India")
library(maps)
UK <- map_data("world") %>% filter(region=="India")
library(ggplot2)
library(dplyr)
Ind <- map_data("world") %>% filter(region=="India")
Ind
data <- world.cities %>% filter(country.etc=="India")
library(shiny); source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
cumsum(1:10)
v<-c(1,2,3,4,5)
v
cumsum(v)
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
install.packages("minpack.lm")
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
df
tail(df, 15
)
x_date[1]
latet
latest_date
latest_date-16
latest_date-15
df[nrec-15,1]
df_new_daily[1,]
df_new_daily[1:nrec,]
tail(df_new_daily[1:nrec,])
bind_rows(df[1:nrec-15,2],df_new_daily[1:nrec,])
library(dplyr)
bind_rows(df[1:nrec-15,2],df_new_daily[1:nrec,])
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
lifecycle::last_warnings()
library(shiny); source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
options(scipen = 9999999)
x<<-"1"
df<-read.csv("https://api.covid19india.org/csv/latest/case_time_series.csv")
df$Date<-as.Date(df$Date,format="%d %b")
nrec<-length(df$Date)
latest_date<-df$Date[nrec]
if(latest_date==Sys.Date()){
latest_date<-latest_date-1
nrec<-nrec-1
}
formatted_ld<-paste(months(latest_date)," ",mday(latest_date),", ",year(latest_date),sep = "")
formatted_sd<-paste(months(df[1,1])," ",mday(df[1,1]),", ",year(df[1,1]),sep = "")
total_cases<-c(df$Total.Confirmed[nrec],df$Total.Deceased[nrec],df$Total.Recovered[nrec],df$Total.Confirmed[nrec]-(df$Total.Deceased[nrec]+df$Total.Recovered[nrec]))
trace_names<-gsub("[.]", " ", names(df)[-1])
col_names<-c("#CCCC00","#33ff64","#ff4f33")
end_time<-500
nlc <- nls.control(maxiter = 10000)
gauss_form<-as.formula(y ~ a * exp(-0.5 * ((x-b)/c)**2))
start_g <- list(a=22601.82885084,b=184.39588789,c=43.63552041)
x<-seq(1,nrec)
xnew<-seq(nrec-15,nrec+end_time)
df1<-df[,c(1,2)]
names(df1)<-c('ds','y')
nrec<-length(df$Date)
df1<-cbind(df1,x)
gauss_model <- nlsLM(formula = gauss_form, data = df1, start = start_g,control = nlc)
ypred<-predict(gauss_model, list(x = xnew))
while(round(tail(ypred, n=1))!=0)
{
end_time<-end_time+90
xnew<-seq(nrec-15,nrec+end_time)
ypred<-predict(gauss_model, list(x = xnew))
}
x_date<-seq(df[nrec-15,1],df[nrec,1]+end_time,by="day")
df_new_daily<-data.frame(x_date,round(ypred))
names(df_new_daily)<-c('date','Expected')
source('run.R')
source('run.R')
library(shiny); source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
source('run.R')
